version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.2.0
jobs:
  test-lint:
    docker:
      - image: circleci/python:3.6.7-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pwd
            pip install --no-cache-dir -r requirements.txt
            curl -sL -o hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-$(uname -s)-$(uname -m)"
            sudo install hadolint /usr/local/bin/
            ls
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run Lint
          command: |
            . venv/bin/activate
            make lint

  push-to-docker-hub:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build --tag=uda-cs .
            docker image 
      - run:
          name: Upload image to dockerhub
          command: |
            DOCKER_PATH=udaduyblx/uda-capstone
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
            docker tag uda-cs $DOCKER_PATH
            docker push $DOCKER_PATH

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yum install tar gzip -y
      - run:
          name: Deploy EKS network
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/network.yml \
              --tags project=uda-capstone \
              --stack-name "deploy-eks-network" \
              --region ${AWS_DEFAULT_REGION}
      - run:
          name: Deploy EKS Cluster
          no_output_timeout: 20m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/eks.yml \
              --tags project=uda-capstone \
              --stack-name "deploy-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Deploy EKS node group
          no_output_timeout: 20m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/node-group.yml \
              --tags project=uda-capstone \
              --stack-name "deploy-node-group" \
              --region ${AWS_DEFAULT_REGION} \
              --capabilities CAPABILITY_NAMED_IAM

  deploy-docker:
    docker:
      - image: cimg/python:3.11.4
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "EKSCLUSTER"
          aws-region: "us-east-1"
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: .circleci/kubernetes/deploy.yml
          resource-name: deployment/uda-final
          get-rollout-status: true
      - run:
          name: Show log of node, pod,...
          command: |
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get services
            kubectl describe svc uda-final
      - run:
          name: Cleaning up
          command: docker system prune

workflows:
  default:
    jobs:
      - test-lint
      - push-to-docker-hub:
          requires:
            - test-lint
          filters:
            branches:
              only:
                - master
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - deploy-docker:
          requires:
            - deploy-infrastructure
            - push-to-docker-hub
